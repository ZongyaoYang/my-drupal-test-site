<?php

declare(strict_types=1);

namespace Drupal\Tests\people\Functional;

use Drupal\Component\Utility\Random;
use Drupal\Core\Field\Plugin\Field\FieldType\StringItem;
use Drupal\Tests\unity_profile\Functional\ContentTypeTestBase;
use Drupal\Tests\unity_profile\Functional\UnityMigrationTestTrait;
use Drupal\user\UserInterface;

/**
 * Tests the basic page content type.
 *
 * @group unity
 * @group people
 */
class PersonPageTest extends ContentTypeTestBase {

  use UnityMigrationTestTrait;

  /**
   * {@inheritdoc}
   */
  protected static array $optInModules = [
    'people',
  ];

  /**
   * Test nodes created during setup.
   *
   * @var \Drupal\node\NodeInterface[]
   */
  protected array $nodes = [];

  /**
   * An editor user account.
   *
   * @var \Drupal\user\UserInterface
   */
  protected UserInterface $editor;

  /**
   * {@inheritdoc}
   */
  protected static bool $hasPageContact = FALSE;

  /**
   * {@inheritdoc}
   */
  protected function setUp(): void {
    parent::setUp();
    $this->editor = $this->createUserWithPermissions(['editor']);
    $this->drupalLogin($this->editor);
    $this->disableMediaLibraryWidget('node', 'person', 'field_primary_image');
    $this->nodes['person_published'] = $this->createTestNode(TRUE);
    $this->nodes['person_unpublished'] = $this->createTestNode(FALSE);
    $this->drupalLogout();
    // Ensure that the anonymous user can't see the unpublished article's page.
    $this->drupalGet($this->nodes['person_unpublished']->toUrl());
    $this->assertSession()->pageTextContains('You are not authorized to access this page.');
  }

  /**
   * {@inheritdoc}
   */
  protected function getMachineName(): string {
    return 'person';
  }

  /**
   * {@inheritdoc}
   */
  protected function getHumanName(): string {
    return 'Person';
  }

  /**
   * Tests that writers have the correct permissions.
   */
  public function testWriterPermissions() {
    // Create a user with the Writer role and log in as that user.
    $this->drupalLogin($this->createUserWithPermissions(['writer']));
    // Create an instance of the content type.
    $test_node = $this->createTestNode();
    $this->drupalGet('/admin/content');
    $this->assertSession()->elementTextContains('css', '.views-table', 'Unpublished');
    $this->drupalGet($test_node->toUrl('edit-form'));
    // Verify that users with the writer role can edit their own content.
    $new_last_name = (new Random())->name();
    $this->submitForm([
      'field_last_name[0][value]' => $new_last_name,
    ], 'Save');
    $first_name = $test_node->get('field_first_name')->first();
    assert($first_name instanceof StringItem);
    $this->assertSession()->pageTextContains("{$this->getHumanName()} {$first_name->getString()} $new_last_name has been updated.");
  }

  /**
   * Tests the functionality of the recent news block.
   */
  public function testPeoplePage() {
    $this->drupalLogin($this->editor);
    // Visit the listing page created by the people module's hook_install()
    // implementation.
    $this->drupalGet('/people');
    // Ensure that the people page was added to the main navigation.
    $this->assertSession()->elementTextContains('css', 'nav .breadcrumb', 'People');
    $people_block_id = '#block-views-block-people';
    // Both person pages should be visible because the editor has permission
    // to view unpublished content.
    $this->assertSession()->elementTextContains('css', $people_block_id, $this->nodes['person_published']->label());
    $this->assertSession()->elementTextContains('css', $people_block_id, $this->nodes['person_unpublished']->label());
    // Log out in order to test as an anonymous user.
    $this->drupalLogout();
    // Ensure the published person is visitable and that the unpublished
    // person is not in the recent news block.
    $this->drupalGet('/people');
    $this->assertSession()->elementTextContains('css', $people_block_id, $this->nodes['person_published']->label());
    $this->assertSession()->elementTextNotContains('css', $people_block_id, $this->nodes['person_unpublished']->label());
  }

  /**
   * {@inheritdoc}
   */
  protected function getNodeAddFormInput(?bool $publish): array {
    $input = parent::getNodeAddFormInput($publish);
    $random = new Random();
    $input['field_job_title[0][value]'] = $random->word(3);
    $input['field_organization[0][value]'] = $random->word(3);
    // Unset the title that was generated by default since it is automatically
    // generated from the first and last name fields on the person content type.
    unset($input['title[0][value]']);
    $input['field_first_name[0][value]'] = $random->name(5);
    $input['field_last_name[0][value]'] = $random->name(5);
    return $input;
  }

  /**
   * {@inheritdoc}
   */
  protected function getExpectedLayoutRegionClassNames(): array {
    return [
      '.layout__region--main-top',
      '.layout__region--main',
    ];
  }

}
